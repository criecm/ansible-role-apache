# {{ ansible_managed }}
<VirtualHost {% if site.listen | join(" ") is search(':') %}{{ site.listen | join(" ") }}{% else %}{% for l in site.listen %}*:{{ l }} {% endfor %}{% endif %}>
  ServerName {{ site.name }}
{% if "aliases" in site and site.aliases | count() > 0 %}
  # aliases
{%   for alias in site.aliases %}
  ServerAlias {{ alias }}

{%   endfor %}
{% endif %}

{% if site.default_index %}
  DirectoryIndex {{ site.default_index }}
{%- endif %}

{% if site.rootdir %}
  DocumentRoot {{ site.rootdir }}

  <Directory {{ site.rootdir }}>
    Require all granted
  </Directory>
{% endif %}

{%- if "tls_cert" in site and "tls_key" in onesite %}
  # TLS config
  SSLEngine on
  SSLCertificateFile {{ tls_dir }}/{{ site.tls_cert }}
  SSLCertificateKeyFile {{ tls_dir }}/private/{{ site.tls_key }}

{%   if "hsts" in site %}
  # + HSTS
  Header unset Strict-Transport-Security
  Header set Strict-Transport-Security "max-age={{ site.hsts | default('31536000') }}"
{%-   endif %}

{%   if "backends" in site %}
  # reverse-proxy HTTPS
  RequestHeader set X-Forwarded-Proto "https"
  RequestHeader set X-Forwarded-Port "443"
{%   endif %}
{%- endif %}

{% if "backends" in site %}
  # keep host name in request
  ProxyPreserveHost On
{%   if site.backends | count() > 1 %}
  # load balancer
  # set cookie for sticky-sessions
  Header add Set-Cookie "{{ site.id }}B=.%{BALANCER_WORKER_ROUTE}e; path=/" env=BALANCER_ROUTE_CHANGED
  <Proxy balancer://{{ site.id }}>
{%     for backend in site.backends %}
    BalancerMember {{ backend }}{% if backend is not search("route=") %} route={{ backend | regex_replace("^.*//([^/\.]*).*","\\1") }}{% endif %}

{%     endfor %}
    Require all granted
    ProxySet stickysession={{ site.id }}B timeout=3
  </Proxy>
{%     if not "prefixes" in site %}
  ProxyPass / balancer://{{ site.id }}/
  ProxyPassReverse / balancer://{{ site.id }}/
{%     endif %}

{%     if admin_from %}
  # balancer-manager from admin ip's
  <Location /balancer-manager>
    SetHandler balancer-manager
{%       for net in admin_from %}
    Require ip {{ net }}
{%       endfor %}
  </Location>
  ProxyPass /balancer-manager !
{%     endif %}

{%   elif site.backends | count() == 1 %}
  # simple reverse-proxy
  <Proxy {{ site.backends[0] | regex_replace(" .*$","")}}>
    Require all granted
  </Proxy>
  ProxyPass / {{ site.backends[0] | regex_replace(" .*$","") }}/{% if site.backends[0] is search("=") %} {{ site.backends[0] | regex_replace("^[^ ]* ","") }}{% endif %}

  ProxyPassReverse / {{ site.backends[0] | regex_replace(" .*$","") }}/
{%   endif %}
{%   if monitoring_from | count > 0 and site.fcgi_status_path %}
  # monitoring
  <Location {{ site.fcgi_status_path }}>
{%     for net in monitoring_from %}
    Require ip {{ net }}
{%     endfor %}
  </Location>
{%   endif %}
{% endif %}

{% if "apache_includes" in site and site.apache_includes | count > 0 %}
  # site.apache_includes
{%   for include in site.apache_includes %}
  Include {{ apache_etcdir }}/{{ include | basename | regex_replace(".j2$","") }}

{%   endfor %}
{% endif %}

{% for prefix in site.prefixes %}
  # prefix {{ prefix.path }}
  <Location {{ prefix.path }}>
{%   if "apache_includes" in prefix and prefix.apache_includes | count > 0 %}
    # prefix."{{ prefix.path }}".apache_includes
{%     for include in prefix.apache_includes %}
    Include {{ apache_etcdir }}/{{ include | basename | regex_replace(".j2$","") }}

{%     endfor %}
{%   endif %}

{%   if prefix.allow_from_nets | default([]) | count > 0 %}
    # prefix."{{ prefix.path }}".allow_from_nets
{%     for net in prefix.allow_from_nets %}
    Require ip {{ net }}
{%     endfor %}
    Require all denied
{%   else %}
{%     if not "apache_includes" in prefix %}
    Require all granted
{%     endif %}
{%   endif %}
{%   if "backends" in site %}
{%     if site.backends | count() > 1 %}
    ProxyPass balancer://{{ site.id }}{{ prefix.path }}
    
    ProxyPassReverse balancer://{{ site.id }}{{ prefix.path }}
{%     elif site.backends | count() == 1 %}
    ProxyPass {{ site.backends[0] | regex_replace(" .*$","") }}{{ prefix.path }}{% if site.backends[0] is search("=") %} {{ site.backends[0] | regex_replace("^[^ ]* ","") }}{% endif %}
    
    ProxyPassReverse {{ site.backends[0] | regex_replace(" .*$","") }}{{ prefix.path }}
{%     endif %}
{%   endif %}
  </Location>
{% endfor %}

{% if "cache" in site %}
# site.cache: {{ site.cache | count() }} items
{% for c in site.cache %}
  CacheEnable {{ c }}

{% endfor %}
{% endif %}

{% if "redirectmatch" in site %}
# site.redirectmatch: {{ site.redirectmatch | count() }} items
{% for red in site.redirectmatch %}
  RedirectMatch {{ site.redirectmatch.type | default("temp") }} "{{ site.redirectmatch.regex }}" {{ site.redirectmatch.dest }}

{% endfor %}
{% endif %}

{% if monitoring_from | count > 0 and site.status_path %}
  # status URL from monitoring
  <Location {{ site.status_path }}>
    SetHandler server-status
{%   for net in monitoring_from %}
    Require ip {{ net }}
{%   endfor %}
  </Location>
{% endif %}

</VirtualHost>

{% if site.tls and site.tls_redir %}
<VirtualHost {% for l in site.listen %}{% if l is search(':') %}{{ l | regex_replace(':.*',':80') }} {% else %}*:80{% endif %}{% endfor %}>
  ServerName {{ site.name }}
{% if "aliases" in site and site.aliases | count() > 0 %}
{%   for alias in site.aliases %}
  ServerAlias {{ alias }}

{%   endfor %}
{% endif %}
  Redirect permanent "/" "https://{{ site.name }}{% if not site.listen | join(" ") | regex_search(':?443') %}:{{ site.listen | join(" ") | regex_replace('.*:','') }}{% endif %}/"
</VirtualHost>
{% endif %}
