{% if "backends" in site and site.backends %}
{% set backends = site.backends %}
{% else %}
{% set backends = [] %}
{% endif %}
# {{ ansible_managed }}
<VirtualHost {% if site.listen | join(" ") is search(':') %}{{ site.listen | join(" ") }}{% else %}{% for l in site.listen %}*:{{ l }} {% endfor %}{% endif %}>
  ServerName {{ site.name }}
{% if "aliases" in site %}
  # aliases
{%   for alias in site.aliases %}
  ServerAlias {{ alias }}

{%   endfor %}
{% endif %}

{% if site.default_index %}
  DirectoryIndex {{ site.default_index }}
{%- endif %}

{% if site.webroot | default(site.rootdir) %}
  DocumentRoot {{ site.webroot | default(site.rootdir) }}

  <Directory {{ site.webroot | default(site.rootdir) }}>
    Require all granted
  </Directory>
{% endif %}

{% if "protocols" in site %}
Protocols {{ site.protocols }}
{% endif %}

{%- if "tls_cert" in site and "tls_key" in onesite %}
  # TLS config
  SSLEngine on
  SSLCertificateFile {{ tls_dir }}/{{ site.tls_cert }}
  SSLCertificateKeyFile {{ tls_dir }}/private/{{ site.tls_key }}

{%   if "hsts" in site %}
  # + HSTS
  Header unset Strict-Transport-Security
  Header set Strict-Transport-Security "max-age={{ site.hsts | default('31536000') }}"
{%-   endif %}

{%   if "backends" in site %}
  # reverse-proxy HTTPS
  RequestHeader set X-Forwarded-Proto "https"
  RequestHeader set X-Forwarded-HTTPS "On"
  RequestHeader set X-Forwarded-Port "443"
{%   endif %}
{%- endif %}

{% for directive in site.apache_directives %}
  {{ directive }}

{% endfor %}

{% if backends | count() > 0 %}
  # backends: {{ backends | join(",") }}
  # keep host name in request
  ProxyPreserveHost On
{%   if backends | count() > 1 %}
{%     if not site.sitebackend | default(False) %}
  # load balancer
{%       if not site.stickysession | default(False) %}
  # set cookie for sticky-sessions
  Header add Set-Cookie "{{ site.id }}B=.%{BALANCER_WORKER_ROUTE}e; path=/;HttpOnly;Secure;SameSite=strict" env=BALANCER_ROUTE_CHANGED
{%       endif %}
  <Proxy balancer://{{ site.id }}>
{%       for backend in backends %}
    BalancerMember {{ backend }}{% if backend is not search("route=") %} route={{ backend | regex_replace("^.*//([^/\.]*).*","\\1") }}{% endif %}{% if backend is not search("connectiontimeout=") %} connectiontimeout=3{% endif %}

{%       endfor %}
    Require all granted
    ProxySet stickysession={{ site.stickysession | default(site.id+"B") }}
  </Proxy>
{%       set sitebackend = "balancer://"+site.id %}
{%     else %}
{%       set sitebackend = site.sitebackend %}
{%     endif %}

{%     if admin_from %}
  # balancer-manager from admin ip's
  <Location "/balancer-manager">
    SetHandler balancer-manager
{%       for net in admin_from %}
    Require ip {{ net }}
{%       endfor %}
  </Location>
  ProxyPass /balancer-manager !
{%     endif %}

{%   elif backends | count() == 1 %}
  # simple reverse-proxy (backends = {{ backends[0] }})
  <Proxy {{ backends[0] | regex_replace(" .*$","")}}>
    Require all granted
  </Proxy>
{% set sitebackend = backends[0] | regex_replace("/? .*$","") %}

{%   endif %}

{%   if monitoring_from | count > 0 and site.fcgi_status_path %}
  # monitoring
  <Location "{{ site.fcgi_status_path }}">
{%     for net in monitoring_from + admin_from | default([]) %}
    Require ip {{ net }}
{%     endfor %}
  </Location>
{%   endif %}
{% endif %}

{% for prefix in site.prefixes %}
{% if "backends" in prefix %}
  ProxyPreserveHost On
{%   if not prefix.prefixbackend | default(False) %}
{%     if prefix.backends | count() > 1 %}
  # prefix {{ prefix.path }} load balancer
  <Proxy balancer://{{ site.id }}{{ prefix.path | regex_replace('/','_') }}>
{%       for backend in prefix.backends %}
{%         if backend is search("http") %}
{%           set myback=backend | regex_replace("^(.*//[^/]*)/[^ ]*( .*)?$","\\1\\2") %}
{%         else %}
{%           set myback=backend %}
{%         endif %}
    BalancerMember {{ myback }}{% if myback is not search("route=") %} route={{ myback | regex_replace("^.*//([^/\.]*).*","\\1") }}{% endif %}

{%       endfor %}
    Require all granted
    ProxySet stickysession={{ site.id }}{{ prefix.path | regex_replace('/','_') }} connectiontimeout=3
  </Proxy>

{%       set prefixbackend="balancer://"+site.id+prefix.path | regex_replace('/','_') %}
{%     endif %}
{%   else %}
{%     set prefixbackend=prefix.prefixbackend %}
{%   endif %}
{% endif %}
{%- endfor %}

{% if "backend" in site and site.backend == "php-fpm" %}
  # backend = php-fpm, fcgisocket = {{ site.fcgisocket }}
  <FilesMatch ".*\.php$">
{% if site.fcgisocket is match ("^/") %}
    SetHandler "proxy:unix:{{ site.fcgisocket }}|fcgi://localhost/"
{% else %}
    SetHandler "proxy:fcgi://fcgisocket"
{% endif %}
  </FilesMatch>
{% endif %}

{% for prefix in site.prefixes %}
  # prefix {{ prefix.path }}
  <Location "{{ prefix.path }}">
{%   if "apache_includes" in prefix and prefix.apache_includes | count > 0 %}
    # prefix."{{ prefix.path }}".apache_includes
{%     for include in prefix.apache_includes %}
    Include {{ apache_etcdir }}/{{ include | basename | regex_replace(".j2$","") }}

{%     endfor %}
{%   endif %}
{%   if "apache_directives" in prefix and prefix.apache_directives | count > 0 %}
{%     for directive in prefix.apache_directives %}
    {{ directive }}

{%     endfor %}
{%   endif %}

{%   if prefix.allow_from_nets | default([]) | count > 0 %}
    # prefix."{{ prefix.path }}".allow_from_nets
{%     for net in prefix.allow_from_nets %}
    Require ip {{ net }}
{%     endfor %}
    Require all denied
{%   else %}
{%     if not "apache_includes" in prefix %}
    Require all granted
{%     endif %}
{%   endif %}
{%   if "options" in prefix %}
    Options {{ prefix.options | join(" ") }}
{%   endif %}
{%   if "backends" in prefix and prefix.backends | count() > 1 %}
{%     if not "prefixbackend" in prefix %}
{%       if ( prefix.backends[0] | regex_replace("^.*//[^/]+(/[^ ]*)","\\1") == prefix.backends[0] ) or not prefix.backends[0] is match("http.*") %}
{%         set prefixpath="" %}
{%       else %}
{%         set prefixpath= prefix.backends[0] | regex_replace("^.*//[^/]+(/[^ ]*)","\\1") %}
{%       endif %}
    ProxyPass balancer://{{ site.id }}{{ prefix.path | regex_replace('/','_') }}{{ prefixpath }}
    # {{ prefix.backends[0] }} -> {{ prefix.backends[0] | regex_replace("^.*//[^/]+(/[^ ]*)","\\1") }}
    ProxyPassReverse balancer://{{ site.id }}{{ prefix.path | regex_replace('/','_') }}{{ prefixpath }}
{%     else %}
    ProxyPass {{ prefix.prefixbackend }}
    ProxyPassReverse {{ prefix.prefixbackend }}

{%     endif %}
{%   elif "backends" in prefix and prefix.backends | count() == 1 %}
    ProxyPass {{ prefix.backends[0] | regex_replace(" .*$","") }}{% if prefix.backends[0] is search("=") %} {{ prefix.backends[0] | regex_replace("^[^ ]* ","") }}{% endif %}

    ProxyPassReverse {{ prefix.backends[0] | regex_replace(" .*$","") }}

{%   endif %}
  </Location>
{% endfor %}

{% if "apache_includes" in site %}
  # site.apache_includes
{%   for include in site.apache_includes %}
  Include {{ apache_etcdir }}/{{ include | basename | regex_replace(".j2$","") }}

{%   endfor %}
{% endif %}

{% if sitebackend | default(False) %}
  ProxyPass / {{ sitebackend | regex_replace(" .*$","") }}/{% if site.backends | count() == 1 and site.backends[0] is search("=") %} {{ site.backends[0] | regex_replace("^[^ ]* ","") }}{% endif %}

  ProxyPassReverse / {{ sitebackend | regex_replace(" .*$","") }}/



{% endif %}

{% if "cache" in site %}
# site.cache: {{ site.cache | count() }} items
{% for c in site.cache %}
  CacheEnable {{ c }}

{% endfor %}
{% endif %}

{% if "redirectmatch" in site %}
# site.redirectmatch: {{ site.redirectmatch | count() }} items
{% for red in site.redirectmatch %}
  RedirectMatch {{ red.type | default("temp") }} "{{ red.regex }}" {{ red.dest }}

{% endfor %}
{% endif %}

{% if monitoring_from | default([]) | count > 0 and site.status_path %}
  # status URL from monitoring
  <Location "{{ site.status_path }}">
    SetHandler server-status
{%   for net in monitoring_from %}
    Require ip {{ net }}
{%   endfor %}
  </Location>
{% endif %}

</VirtualHost>

{% if site.tls and site.tls_redir %}
<VirtualHost {% for l in site.listen %}{% if l is search(':[0-9]+$') %}{{ l | regex_replace(':[0-9]+$',':80') }} {% else %}*:80{% endif %}{% endfor %}>
  ServerName {{ site.name }}
{% if "aliases" in site %}
{%   for alias in site.aliases %}
  ServerAlias {{ alias }}

{%   endfor %}
{% endif %}
  Redirect permanent "/" "https://{{ site.name }}{% if not site.listen | join(" ") | regex_search(':?443') %}:{{ site.listen | join(" ") | regex_replace('.*:','') }}{% endif %}/"
</VirtualHost>
{% endif %}
