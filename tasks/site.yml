# config pour un site apache
# 
# Exemple sur une debian avec site: { id: sitexemple, apache_includes: [ file1.inc, file2.inc ] }
# 
# Le fichier de conf sera copié (si .j2 c'est un template):
#   dans /etc/apache2/sites-enables/sitexmple.conf
#   depuis (first match wins) {{ siteconf_locations }} dans vars/site.yml:
#
# les 'includes' seront copiés: (ex. pour 'file1.inc'):
#   dans /etc/apache2/file1.inc
#   depuis (first match wins) {{ include_locations }} dans vars/site.yml:
---
- name: site vars
  include_vars: site.yml

- name: site fact
  set_fact:
    site: '{{ default_site | combine(onesite) }}'

- name: working on {{ site.id }}
  debug:
    var: site

- name: site includes
  template:
    dest: '{{ apache_etcdir }}/{{ item | basename | regex_replace(".j2$","") }}'
    src: '{{ lookup("first_found", include_locations) }}'
    force: '{{ apache_rewrite_site_config }}'
  loop: '{{ [site] | json_query("[?apache_includes].apache_includes") 
  | union([site] | json_query("[?prefixes].prefixes[].apache_includes")) | list | flatten | unique }}'
  when: '"apache_includes" in site or "prefixes" in site'
  notify: reload apache

- name: site configs
  template:
    dest: '{{ apache_etcdir }}/{{ item | basename | regex_replace(".j2$","") }}'
    src: '{{ lookup("first_found", include_locations) }}'
    force: '{{ apache_rewrite_site_config }}'
  loop: '{{ [site] | json_query("[?apache_configs].apache_includes")
  | union([site] | json_query("[?prefixes].prefixes[].apache_includes")) | list | flatten | unique }}'
  when: '"apache_configs" in site or "prefixes" in site'
  notify: reload apache

- name: conf includes
  copy:
    src: '{{ item }}'
    dest: '{{ apache_etcdir }}/{{ apache_includesdir }}/{{ item | basename | regex_replace(".*/([^/]+)$","\1") }}'
    mode: '0644'
    force: '{{ apache_rewrite_site_config }}'
  with_fileglob:
    - 'apache/{{ site.id }}/{{ apache_includesdir }}/*.conf'
  loop_control:
    label: '{{ apache_etcdir }}/{{ apache_includesdir }}/{{ item | basename | regex_replace(".*/([^/]+)$","\1") }}'
  notify: reload apache

# app root dir
- block:
  - name: root dir
    copy:
      dest: '{{ site.rootdir }}/'
      src: '{{ site.rootsrc }}/'
      mode: a=rX,u+w
      owner: root
      group: '{{ site.group }}'
    when: '"rootsrc" in onesite'
  - name: root git
    git:
      clone: yes
      depth: 2
      repo: '{{ site.gitroot }}'
      dest: '{{ site.rootdir }}'
      version: '{{ site.gitrootversion | default("master") }}'
    when: '"gitroot" in onesite'
  - name: mkdir root dir
    file:
      dest: '{{ site.rootdir }}'
      state: directory
      mode: '0751'
      owner: root
      group: '{{ site.group }}'
    when: '"rootdir" in onesite'
  - name: grwfiles
    file:
      dest: '{{ item }}'
      state: file
      mode: g+w
      group: '{{ site.group }}'
    with_items: '{{ site.grwfiles }}'
    when: '"grwfiles" in onesite'
  - name: grwdirs
    file:
      dest: '{{ item }}'
      state: directory
      mode: g+w
      recurse: yes
      group: '{{ site.group }}'
    with_items: '{{ site.grwdirs }}'
    when: '"grwdirs" in onesite'

- name: TLS cert
  copy:
    src: 'tls/{{ site.tls_cert }}'
    dest: '{{ tls_dir }}/{{ site.tls_cert }}'
    mode: '0644'
    force: no
  when: '"tls_cert" in site'

- block:
  - name: TLS private dir
    file:
      dest: '{{ tls_dir }}/private'
      state: directory
      mode: '0700'
      owner: root
  - name: TLS key
    copy:
      src: 'tls/{{ site.tls_key }}'
      dest: '{{ tls_dir }}/private/{{ site.tls_key }}'
      force: no
      mode: '0400'
  when: '"tls_key" in site'

- name: site apache config
  template:
    dest: '{{ apache_etcdir }}/{{ apache_sitesdir }}/{% if site.id == "default" %}0{% endif %}{{ site.id }}.conf'
    src: '{{ lookup("first_found", siteconf_locations) }}'
    force: '{{ apache_rewrite_site_config }}'
  notify: reload apache

- name: Listen in Zsites.conf
  lineinfile:
    dest: '{{ apache_etcdir }}/{{ apache_includesdir }}/Zsites.conf'
    line: 'Listen {{ item }}'
    regexp: 'Listen {{ item | regex_escape() }}'
    insertafter: 'Listen'
  loop: '{{ lookup("flattened",[site.listen],wantlist=True) }}'
  when: '( ansible_os_family == "FreeBSD" and not item | regex_search("80$") ) or
        ( not item | regex_search("(80|443)$") )'

# monitoring
- block:
  - name: status_path tmp var
    set_fact:
      tmpmon:
        - proto: '{% if site.tls_key | default(False) or (proxified_by | count > 0) %}https{% else %}http{% endif %}'
          name: '{{ site.name }}'
          path: '{{ site.status_path }}'
          type: apache-status
  - name: fcgi_status_path tmp var
    set_fact:
      tmpmonfcgi:
        - proto: '{% if site.tls_key | default(False) or (proxified_by | count > 0) %}https{% else %}http{% endif %}'
          name: '{{ site.name }}'
          path: '{{ site.fcgi_status_path }}'
          type: '{{ site.backend | default ("http_status") }}'
    when: '"fcgi_status_path" in site and site.fcgi_status_path | length > 0'

  - name: add status_pathes to to_monitor
    set_fact:
      to_monitor: '{{ to_monitor | default([]) | union(tmpmon) | union( tmpmonfcgi | default([]) ) }}'
      cacheable: yes
  when: '"status_path" in site and site.status_path | length > 0'
